pipeline {
    environment {
        registry = 'sourish88/sample-java-app'
        registryCredential = 'DockerHub-Creds'
    }

    agent {
    kubernetes {
      yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            job: ${JOB_BASE_NAME}
        spec:
          containers:
            - name: maven
              image: maven:3-alpine
              command:
              - cat
              tty: true
            - name: dind
              image: docker:dind
              securityContext:
                privileged: true
              volumeMounts:
              - name: dind-storage
                mountPath: /var/lib/docker
          volumes:
          - name: dind-storage
            emptyDir: {}
        """.stripIndent()
    }
  }

    stages {
        // Build stage
        stage('Build') {
            // kubernetes agent for build
            steps {
                container('maven') {
                    sh 'mvn -B -DskipTests clean package'
                }
            }
        }

        //Test stage
        stage('Test') {
            // kubernetes agent for build
            steps {
                container('maven') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    jacoco( 
                        execPattern: 'target/*.exec',
                        classPattern: 'target/classes',
                        sourcePattern: 'src/main/java',
                        exclusionPattern: 'src/test*'
                    )
                }
            }
        }

        // Deliver stage
        stage('Deliver') {
            // kubernetes agent for build
            steps {
                container('maven') {
                    sh './jenkins/scripts/deliver.sh'
                }
            }
        }

        // Build and Publish Image
        stage('Publish') {
            steps {
                container('dind') {
                    script {
                        dockerImage = docker.build registry + ":1.0.$BUILD_NUMBER" 
                        docker.withRegistry( '', registryCredential ) { 
                            dockerImage.push() 
                        }
                    }
                }
            }            
        }

        // Trigger deployment
        // stage('Deploy') {
        //     agent none
        //     steps {
        //         script {
        //             build job:'Deployment/DockerDeployPipiline' , parameters:[
        //              string(name: "APP_NAME",  value: "sampleJavaApp"),
        //              string(name: "DOCKER_REPO", value: registry),
        //              string(name: "VERSION_TAG",  value: "1.0.$BUILD_NUMBER")
        //            ]
        //         }
        //     }            
        // }
    }
}
